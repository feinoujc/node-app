name: Docker2

on: [push]
  # push:
  #   # Publish `master` as Docker `latest` image.
  #   branches:
  #     - master

  #   # Publish `v1.2.3` tags as releases.
  #   tags:
  #     - v*

  # # Run tests for any PRs.
  # pull_request:

env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: node-app

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1

      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run test
          else
            docker build . --file Dockerfile
          fi

  # Push image to GitHub Package Registry.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    # if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v1
      - uses: rlespinasse/github-slug-action@1.0.1
      - name: Print slug variables
        run: |
          echo ${{ env.GITHUB_REF_SLUG }}
          echo ${{ env.GITHUB_HEAD_REF_SLUG }}
          echo ${{ env.GITHUB_BASE_REF_SLUG }}

      - name: Build image
        run: docker build . --file Dockerfile --tag image

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        env:
          IMAGE_TAG: ${{ env.GITHUB_REF_SLUG }}-${{ github.sha }}
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

          # Strip git ref prefix from version
          VERSION=$GITHUB_REF_SLUG

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag image $IMAGE_ID:$IMAGE_TAG
          docker tag image $IMAGE_ID:$VERSION

          docker push $IMAGE_ID:$IMAGE_TAG
          docker push $IMAGE_ID:$VERSION

